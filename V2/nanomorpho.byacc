%{
	import java.io.*;
	import java.util.*;
%}

%token <sval> IF, ELSE, ELSEIF, VAR, WHILE, NAME, RETURN, FUN, OP1, OP2, OP3, OP4, OP5, LITERAL, ASSIGNMENT
%type  <obj> iftail, optexprs, optexprsm, moreexprs, binopexpr, optmp1, optmp2, optmp3, optmp4, expr, smallexpr
%%

start
	: program
	;

program
	: func
	| program func
	;

func
	: FUN NAME {millithula.add($2);}
		'(' {tmp_arraylist.clear();} optnames {millithula.add(new ArrayList<Object>(tmp_arraylist));} ')'
		'{' {tmp_arraylist.clear();} decls {millithula.add(new ArrayList<Object>(tmp_arraylist));}
		{tmp_arraylist.clear();} exprs {millithula.add(new ArrayList<Object>(tmp_arraylist));} '}'
	;

optnames
	: names
	|
	;

decls
	: decls decl ';'
	|
	;

decl
	: VAR names
	;

names
	: NAME 				{tmp_arraylist.add($1);}
	| names ',' NAME 	{tmp_arraylist.add($3);}
	;

exprs
	: expr {tmp_arraylist.add($1);} ';' exprs
	|
	;

expr
	: NAME ASSIGNMENT expr
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add("=");
		ret.add($1);
		ret.add($3);
		$$ = ret;
	}
	| RETURN expr
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add("return");
		ret.add($2);
		$$ = ret;
	}
	| binopexpr
	;

binopexpr
	: binopexpr OP5 optmp1
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add($2);
		ret.add(new ArrayList<Object>());
		((ArrayList)ret.get(1)).add($3);
		((ArrayList)ret.get(1)).add($1);
		$$ = ret;
	}
	| optmp1
	;

optmp1
	: optmp1 OP4 optmp2
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add($2);
		ret.add(new ArrayList<Object>());
		((ArrayList)ret.get(1)).add($3);
		((ArrayList)ret.get(1)).add($1);
		$$ = ret;
	}
	| optmp2
	;

optmp2
	: optmp2 OP3 optmp3
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add($2);
		ret.add(new ArrayList<Object>());
		((ArrayList)ret.get(1)).add($3);
		((ArrayList)ret.get(1)).add($1);
		$$ = ret;
	}
	| optmp3
	;

optmp3
	: optmp3 OP2 optmp4
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add($2);
		ret.add(new ArrayList<Object>());
		((ArrayList)ret.get(1)).add($3);
		((ArrayList)ret.get(1)).add($1);
		$$ = ret;
	}
	| optmp4
	;

optmp4
	: optmp4 OP1 smallexpr
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add($2);
		ret.add(new ArrayList<Object>());
		((ArrayList)ret.get(1)).add($3);
		((ArrayList)ret.get(1)).add($1);
		$$ = ret;
	}
	| smallexpr
	;

smallexpr
	: NAME
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add($1);
		$$ = ret;
	}
	| NAME '(' optexprs ')'
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add($1);
		ret.add($3);
		$$ = ret;
	}
	| OP5 smallexpr
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ArrayList<Object> tmp1 = new ArrayList<Object>();
		ArrayList<Object> tmp2 = new ArrayList<Object>();
		ret.add($1);
		tmp2.add($2);
		tmp1.add(tmp2);
		ret.add(tmp1);
		$$ = ret;
	}
	| OP4 smallexpr
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ArrayList<Object> tmp1 = new ArrayList<Object>();
		ArrayList<Object> tmp2 = new ArrayList<Object>();
		ret.add($1);
		tmp2.add($2);
		tmp1.add(tmp2);
		ret.add(tmp1);
		$$ = ret;
	}
	| OP3 smallexpr
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ArrayList<Object> tmp1 = new ArrayList<Object>();
		ArrayList<Object> tmp2 = new ArrayList<Object>();
		ret.add($1);
		tmp2.add($2);
		tmp1.add(tmp2);
		ret.add(tmp1);
		$$ = ret;
	}
	| OP2 smallexpr
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ArrayList<Object> tmp1 = new ArrayList<Object>();
		ArrayList<Object> tmp2 = new ArrayList<Object>();
		ret.add($1);
		tmp2.add($2);
		tmp1.add(tmp2);
		ret.add(tmp1);
		$$ = ret;
	}
	| OP1 smallexpr
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ArrayList<Object> tmp1 = new ArrayList<Object>();
		ArrayList<Object> tmp2 = new ArrayList<Object>();
		ret.add($1);
		tmp2.add($2);
		tmp1.add(tmp2);
		ret.add(tmp1);
		$$ = ret;
	}
	| WHILE '(' expr ')' '{' optexprsm '}'
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add("while");
		ret.add($3);
		ret.add($6);
		$$ = ret;
	}
	| IF '(' expr ')' '{' optexprsm '}' iftail
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add("if");
		ret.add($3);
		ret.add($6);
		ret.add($8);
		$$ = ret;
	}
	| LITERAL
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add($1);
		$$ = ret;
	}
	| '(' expr ')'
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add($2);
		$$ = ret;
	}
	;

optexprs
	: expr moreexprs
	{
		ArrayList<Object> ret = new ArrayList<Object>((ArrayList)$2);
		ret.add($1);
		$$ = ret;
	}
	| {$$ = new ArrayList<Object>();}
	;

moreexprs
	: ',' expr moreexprs
	{
		ArrayList<Object> ret = new ArrayList<Object>((ArrayList)$3);
		ret.add($2);
		$$ = ret;
	}
	| {$$ = new ArrayList<Object>();}
	;

optexprsm
	: expr ';' optexprsm
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add($1);
		ret.addAll((ArrayList)$3);
		$$ = ret;
	}
	| {$$ = new ArrayList<Object>();}
	;

iftail
	: ELSEIF '(' expr ')' '{' optexprsm '}' iftail
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add("elseif");
		ret.add($3);
		ret.add($6);
		ret.add($8);
		$$ = ret;
	}
	| ELSE '{' optexprsm '}'
	{
		ArrayList<Object> ret = new ArrayList<Object>();
		ret.add("else");
		ret.add($3);
		$$ = ret;
	}
	| {$$ = new ArrayList<Object>();}
	;

%%

	private NanomorphoLexer lexer;

	private int yylex()
	{
		int yyl_return = -1;
		try
		{
			yylval = new BorphoVal(0);
			yyl_return = lexer.yylex();
		}
		catch (IOException e)
		{
			System.err.println("IO error: " + e);
		}
//		System.out.println("Debug " + yylval.sval + "(" + yyl_return + ")");

		return yyl_return;
	}

	public void yyerror(String error)
	{
		System.err.println("Error: " + error);
	}

	public Borpho(Reader r)
	{
		lexer = new NanomorphoLexer(r,this);
	}

	public static void thula()
	{
		int i = 0;
		int n = millithula.size();
		while (i < n)
		{
			variable_map.clear();
			var_counter = 0;
			masm.print("#\"");
			masm.print(millithula.get(i++));
			masm.print("[f" + ((ArrayList)millithula.get(i)).size());
			masm.println("]\" = ");
			masm.println("[");
			
			thula_args((ArrayList)millithula.get(i++));
			
			thula_decl((ArrayList)millithula.get(i++));

			int m = ((ArrayList)millithula.get(i)).size();
			for (int j = 0; j < m; j++)
				thula_expr((ArrayList)((ArrayList)millithula.get(i)).get(j));

			i++;

			masm.println("(Return)");
			masm.println("];");
			masm.println();
		}
	}

	public static void thula_args(ArrayList ls)
	{
		int n = ls.size();
		for (int i = 0; i < n; i++)
		{
			if (variable_map.get((String)ls.get(i)) != null) throw_error("Variable \"" + (String)ls.get(i) + "\" is already declared.");
			variable_map.put((String)ls.get(i), (Integer)var_counter);
			var_counter++;
		}
	}

	public static void thula_decl(ArrayList ls)
	{
		int n = ls.size();
		masm.println("(MakeVal null)");
		for (int i = 0; i < n; i++)
		{
			if (variable_map.get((String)ls.get(i)) != null) throw_error("Variable \"" + (String)ls.get(i) + "\" is already declared.");
			variable_map.put((String)ls.get(i), (Integer)var_counter);
			masm.println("(Push)");
			var_counter++;
		}
	}

	public static void thula_expr(ArrayList expr)
	{
		if (expr.size() == 0) return;
		if (expr.size() == 1)
		{
			if (expr.get(0) instanceof ArrayList)
			{
				thula_expr((ArrayList)expr.get(0));
				return;
			}
			if (is_literal((String)expr.get(0)))
			{
				masm.println("(MakeVal " + expr.get(0) + ")");
				return;
			}
			else
			{
				Integer loc = variable_map.get((String)expr.get(0));
				if (loc == null) throw_error("Unknown variable \"" + expr.get(0) + "\"");
				masm.println("(Fetch " + loc + ")");
				return;
			}
		}

		String head = (String)expr.get(0);


		if (head.equals("if"))
		{
			int bottom_label = name_counter++;
			int next_label   = name_counter++;
			thula_expr((ArrayList)expr.get(1));
			masm.println("(GoFalse _L" + next_label + ")");

			int n = ((ArrayList)expr.get(2)).size();
			for (int i = 0; i < n; i++)
				thula_expr((ArrayList)((ArrayList)expr.get(2)).get(i));

			masm.println("(Go _L" + bottom_label + ")");
			masm.println("_L" + next_label + ":");

			thula_iftl((ArrayList)expr.get(3), bottom_label);
			return;
		}

		if (head.equals("while"))
		{
			int top_label = name_counter++;
			int bot_label = name_counter++;
			masm.println("_L" + top_label + ":");
			thula_expr((ArrayList)expr.get(1));
			masm.println("(GoFalse _L" + bot_label + ")");

			int n = ((ArrayList)expr.get(2)).size();
			for (int i = 0; i < n; i++)
				thula_expr((ArrayList)((ArrayList)expr.get(2)).get(i));

			masm.println("(Go _L" + top_label + ")");
			masm.println("_L" + bot_label + ":");
			return;
		}

		if (head.equals("="))
		{
			Integer loc = variable_map.get((String)expr.get(1));
			if (loc == null) throw_error("Variable \"" + head + "\" not found");

			thula_expr((ArrayList)expr.get(2));

			masm.println("(Store " + loc + ")");
			return;
		}

		if (head.equals("return"))
		{
			thula_expr((ArrayList)expr.get(1));
			masm.println("(Return)");
		}
		
		else
		{
			int n = ((ArrayList)expr.get(1)).size();
			for (int i = 0; i < n; i++)
			{
				if (i != 0) masm.println("(Push)");
				thula_expr((ArrayList)((ArrayList)expr.get(1)).get(n - i - 1));
			}

			masm.println("(Call #\"" + head + "[f" + n + "]\" " + n + ")");
			return;
		}
	}

	public static void thula_iftl(ArrayList ls, int bottom_label)
	{
		if (ls.size() == 0) 
		{
			masm.println("_L" + bottom_label + ":");
			return;
		}
		if (((String)ls.get(0)).equals("elseif"))
		{
			int next_label = name_counter++;
			thula_expr((ArrayList)ls.get(1));
			masm.println("(GoFalse _L" + next_label + ")");

			int n = ((ArrayList)ls.get(2)).size();
			for (int i = 0; i < n; i++)
				thula_expr((ArrayList)((ArrayList)ls.get(2)).get(i));

			masm.println("(Go _L" + bottom_label + ")");
			masm.println("_L" + next_label + ":");

			thula_iftl((ArrayList)ls.get(3), bottom_label);
		}
		else
		{
			int n = ((ArrayList)ls.get(1)).size();
			for (int i = 0; i < n; i++)
				thula_expr((ArrayList)((ArrayList)ls.get(1)).get(i));

			masm.println("_L" + bottom_label + ":");
			return;
		}
	}


	public static boolean is_literal(String str)
	{
		return is_double(str) || is_string(str) || is_boolean(str) || is_null(str);
	}
	public static boolean is_string(String str)
	{
		return str.charAt(0) == '\"';
	}
	public static boolean is_boolean(String str)
	{
		return str.equals("true") || str.equals("false");
	}
	public static boolean is_null(String str)
	{
		return str.equals("null");
	}
	public static boolean is_double(String str)
	{
		try
		{
			double d = Double.parseDouble(str);
			return true;
		}
		catch (NumberFormatException ex)
		{
			return false;
		}
	}
		
		




	public static HashMap<String, Integer> variable_map;
	public static ArrayList<Object> millithula;
	public static ArrayList<Object> tmp_arraylist;
	public static PrintStream masm;

	public static int name_counter;
	public static int var_counter;

	public static void main(String[] args)
		throws FileNotFoundException
	{
		Borpho yyparser = new Borpho(new FileReader(args[0]));
		if (args.length == 0)
		{
			System.err.println("Fatal error. No input file.");
			System.exit(1);
		}

		variable_map  = new HashMap<String, Integer>();
		millithula    = new ArrayList<Object>();
		tmp_arraylist = new ArrayList<Object>();
		masm          = new PrintStream(new File(args[0] + ".masm"));
		name_counter  = 0;
		var_counter   = 0;

		System.out.println("Parsing!");
		yyparser.yyparse();
		System.out.println("Parser finsished!");

		System.out.println();

		masm.println("\"" + args[0] + ".mexe\" = main in\n!\n{{");
		thula();
		masm.println("}}\n*\nBASIS\n;");

		System.out.println("Comilation complete!");
	}

	public static void throw_error(String error)
	{
		System.out.println(error);
		System.exit(4);
	}
